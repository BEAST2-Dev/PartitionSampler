package beast.evolution.operators;

import beast.core.Input;
import beast.core.Operator;
import beast.core.parameter.RealParameter;
import beast.evolution.branchratemodel.QuantileUCRelaxedClock;
import beast.evolution.tree.Node;
import beast.evolution.tree.Tree;
import beast.math.distributions.ParametricDistribution;
import beast.util.Randomizer;
import org.apache.commons.math.MathException;

import javax.management.RuntimeErrorException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by IntelliJ IDEA.
 * User: Jessie Wu
 * Date: 3/10/13
 * Time: 2:58 PM
 * To change this template use File | Settings | File Templates.
 */
public class BranchRateSubtreeSlide extends TreeOperator {
    public Input<Boolean> changeRatesAtRootInput = new Input<Boolean>("changeRatesAtRoot", "When to change rates ahen there is a change in the root.", true);
    public Input<Double> m_size = new Input<Double>("size", "size of the slide, default 1.0", 1.0);
    public Input<Boolean> m_gaussian = new Input<Boolean>("gaussian", "Gaussian (=true=default) or uniform delta", true);
    public Input<Boolean> m_bOptimise = new Input<Boolean>("optimise", "flag to indicate that the scale factor is automatically changed in order to acheive a good acceptance rate (default true)", true);
    public Input<RealParameter> quantilesInput = new Input<RealParameter>("quantiles","the quantiles of the prior distribution on the rates associated with nodes in the tree for sampling of individual rates among branches.");
    public Input<QuantileUCRelaxedClock> quantileUCRelaxedClockInput = new Input<QuantileUCRelaxedClock>("quantileUCRelaxedClock","The relaxed clock used to model temporal heterogeneity in rates.", Input.Validate.REQUIRED);
    // shadows m_size
    double m_fSize;
    private RealParameter quantiles;
    private QuantileUCRelaxedClock quantileUCRelaxedClock;
    private boolean changeRatesAtRoot;

    @Override
    public void initAndValidate() {

        m_fSize = m_size.get();
        quantiles = quantilesInput.get();
        quantileUCRelaxedClock = quantileUCRelaxedClockInput.get();
        changeRatesAtRoot = changeRatesAtRootInput.get();
    }

    /**
     * Do a probabilistic subtree slide move.
     *
     * @return log of Hastings Ratio, or Double.NEGATIVE_INFINITY if proposal should not be accepted *
     */
    @Override
    public double proposal() {
        final Tree tree = m_tree.get(this);

        double logq;

        Node i;

        // 1. choose a random node avoiding root
        do {
            i = tree.getNode(Randomizer.nextInt(tree.getNodeCount()));
        } while (i.isRoot());

        final Node iP = i.getParent();
        final Node CiP = getOtherChild(iP, i);
        final Node PiP = iP.getParent();

        // 2. choose a delta to move
        final double delta = getDelta();
        final double oldHeight = iP.getHeight();
        final double newHeight = oldHeight + delta;

        // 3. if the move is up
        if (delta > 0) {

            // 3.1 if the topology will change
            if (PiP != null && PiP.getHeight() < newHeight) {
                // find new parent
                Node newParent = PiP;
                Node newChild = iP;
                while (newParent.getHeight() < newHeight) {
                    newChild = newParent;
                    newParent = newParent.getParent();
                    if (newParent == null) break;
                }


                // 3.1.1 if creating a new root
                if (newChild.isRoot()) {
                    if(changeRatesAtRoot){
                        double oldiSubst = i.getLength()*quantileUCRelaxedClock.getRawRateForBranch(i);
                        double oldCiPSubst = CiP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(CiP);
                        double oldiPSubst = iP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(iP);

                        replace(iP, CiP, newChild);
                        replace(PiP, iP, CiP);

                        iP.setParent(null);
                        tree.setRoot(iP);
                        iP.setHeight(newHeight);
                        try{
                            double newiQ = quantileUCRelaxedClock.getQuantile(oldiSubst/i.getLength()) ;
                            double newCiPQ = quantileUCRelaxedClock.getQuantile((oldCiPSubst+oldiPSubst)/CiP.getLength());
                            double newjQ = Randomizer.nextDouble();

                            int jNr = newChild.getNr();
                            int iPNr = iP.getNr();
                            if(jNr != (tree.getNodeCount() - 1) && iPNr != (tree.getNodeCount() - 1)){


                                double temp = quantiles.getValue(jNr);
                                quantiles.setValue(jNr,quantiles.getValue(iPNr));
                                quantiles.setValue(iPNr,temp);


                            }

                            quantiles.setValue(i.getNr() == (tree.getNodeCount() - 1)? iPNr:i.getNr(),newiQ);
                            quantiles.setValue(CiP.getNr() == (tree.getNodeCount() - 1)? iPNr:CiP.getNr(),newCiPQ);
                            quantiles.setValue(jNr == (tree.getNodeCount() - 1)? iPNr:jNr,newjQ);
                        }catch (MathException e){
                            return Double.NEGATIVE_INFINITY;
                        }
                    }else{
                        replace(iP, CiP, newChild);
                        replace(PiP, iP, CiP);

                        iP.setParent(null);
                        tree.setRoot(iP);
                        iP.setHeight(newHeight);

                    }






                }
                // 3.1.2 no new root
                else {
                    try{

                        //System.out.println("flag1");
                        double oldiSubst = i.getLength()*quantileUCRelaxedClock.getRawRateForBranch(i);
                        double oldCiPSubst = CiP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(CiP);
                        double oldiPSubst = iP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(iP);
                        double oldjSubst = newChild.getLength()*quantileUCRelaxedClock.getRawRateForBranch(newChild);

                        replace(iP, CiP, newChild);
                        replace(PiP, iP, CiP);
                        replace(newParent, newChild, iP);
                        iP.setHeight(newHeight);


                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(i),
                                quantileUCRelaxedClock.getQuantile(oldiSubst/i.getLength())

                        );

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(CiP),
                                quantileUCRelaxedClock.getQuantile((oldCiPSubst+oldiPSubst)/CiP.getLength())
                        );

                        double prop = Randomizer.nextDouble();

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(iP),
                                quantileUCRelaxedClock.getQuantile(oldjSubst*prop/iP.getLength())
                        );

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(newChild),
                                quantileUCRelaxedClock.getQuantile(oldjSubst*(1.0 - prop)/newChild.getLength())
                        );

                        if(Double.isNaN(oldiSubst/i.getLength())){
                            throw new RuntimeException();
                        }

                        if(Double.isNaN((oldCiPSubst+oldiPSubst)/CiP.getLength())){
                            throw new RuntimeException();
                        }

                        if(Double.isNaN(oldjSubst*prop/iP.getLength())){
                            throw new RuntimeException();
                        }

                        if(Double.isNaN(oldjSubst*(1.0 - prop)/newChild.getLength())){
                            throw new RuntimeException();

                        }

                    }catch(MathException e){
                        return Double.NEGATIVE_INFINITY;

                    }


                }



                // 3.1.3 count the hypothetical sources of this destination.
                final int possibleSources = intersectingEdges(newChild, oldHeight, null);
                //System.out.println("possible sources = " + possibleSources);

                logq = -Math.log(possibleSources);

            } else {
                try{
                if(iP.isRoot()){

                    //System.out.println("flag2");
                    double oldiSubst = i.getLength()*quantileUCRelaxedClock.getRawRateForBranch(i);
                    double oldCiPSubst = CiP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(CiP);


                        iP.setHeight(newHeight);



                    double newiBranchLength = i.getLength();
                    double newCiPBranchLength = CiP.getLength();
                    quantiles.setValue(
                            quantileUCRelaxedClock.getQuantileIndex(i),
                            quantileUCRelaxedClock.getQuantile(oldiSubst/newiBranchLength)

                    );

                    quantiles.setValue(
                            quantileUCRelaxedClock.getQuantileIndex(CiP),
                            quantileUCRelaxedClock.getQuantile(oldCiPSubst/newCiPBranchLength)

                    );



                }else{
                    //System.out.println("flag3");
                    // just change the node height
                    double oldiSubst = i.getLength()*quantileUCRelaxedClock.getRawRateForBranch(i);
                    double oldCiPSubst = CiP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(CiP);
                    double oldiPSubst = iP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(iP);
                    //System.out.println("oldiSubst: "+oldiSubst);
                    //System.out.println("oldCiPSubs: "+oldCiPSubst);
                    //System.out.println("oldiPSubst: "+oldiPSubst );

                    iP.setHeight(newHeight);
                    double newiBranchLength = i.getLength();
                    double newCiPBranchLength = CiP.getLength();
                    double newiPBranchLength = iP.getLength();

                    quantiles.setValue(
                            quantileUCRelaxedClock.getQuantileIndex(i),
                            quantileUCRelaxedClock.getQuantile(oldiSubst/newiBranchLength)

                    );

                    quantiles.setValue(
                            quantileUCRelaxedClock.getQuantileIndex(CiP),
                            quantileUCRelaxedClock.getQuantile(oldCiPSubst/newCiPBranchLength)

                    );

                    quantiles.setValue(
                            quantileUCRelaxedClock.getQuantileIndex(iP),
                            quantileUCRelaxedClock.getQuantile(oldiPSubst/newiPBranchLength)

                    );


                    //System.out.println(quantileUCRelaxedClock.getQuantile(oldiSubst/newiBranchLength));
                    //System.out.println(quantileUCRelaxedClock.getQuantile(oldCiPSubst/newCiPBranchLength));

                    //System.out.println(quantileUCRelaxedClock.getQuantile(oldiPSubst/newiPBranchLength));
                }
                    }catch(MathException e){
                        return Double.NEGATIVE_INFINITY;

                    }




                logq = 0.0;
            }
        }
        // 4 if we are sliding the subtree down.
        else {

            // 4.0 is it a valid move?
            if (i.getHeight() > newHeight) {
                return Double.NEGATIVE_INFINITY;
            }

            // 4.1 will the move change the topology
            if (CiP.getHeight() > newHeight) {

                final List<Node> newChildren = new ArrayList<Node>();
                final int possibleDestinations = intersectingEdges(CiP, newHeight, newChildren);

                // if no valid destinations then return a failure
                if (newChildren.size() == 0) {
                    return Double.NEGATIVE_INFINITY;
                }

                // pick a random parent/child destination edge uniformly from options
                final int childIndex = Randomizer.nextInt(newChildren.size());
                final Node newChild = newChildren.get(childIndex);
                final Node newParent = newChild.getParent();


                // 4.1.1 if iP was root
                if (iP.isRoot()) {
                    if(changeRatesAtRoot){

                    double oldiSubst = i.getLength()*quantileUCRelaxedClock.getRawRateForBranch(i);
                    double oldjSubst = newChild.getLength()*quantileUCRelaxedClock.getRateForBranch(newChild);
                    // new root is CiP
                    replace(iP, CiP, newChild);
                    replace(newParent, newChild, iP);

                    CiP.setParent(null);
                    tree.setRoot(CiP);
                    iP.setHeight(newHeight);
                    try{

                        double newiQ = quantileUCRelaxedClock.getQuantile(oldiSubst/i.getLength());
                        double prop = Randomizer.nextDouble();
                        double newiPQ = quantileUCRelaxedClock.getQuantile(oldjSubst*prop/iP.getLength());
                        double newjQ = quantileUCRelaxedClock.getQuantile(oldjSubst*(1.0 - prop)/newChild.getLength());

                        int iPNr = iP.getNr();
                        int CiPNr = CiP.getNr();
                        if(iPNr != (tree.getNodeCount() - 1) && CiPNr != (tree.getNodeCount() - 1)){


                            double temp = quantiles.getValue(iPNr);
                            quantiles.setValue(iPNr,quantiles.getValue(CiPNr));
                            quantiles.setValue(CiPNr,temp);


                        }

                        quantiles.setValue(i.getNr() == (tree.getNodeCount() - 1)? CiP.getNr():i.getNr(),newiQ);
                        quantiles.setValue(iPNr  == (tree.getNodeCount() - 1)? CiP.getNr():iP.getNr(),newiPQ);
                        quantiles.setValue(newChild.getNr() == (tree.getNodeCount() - 1)? CiP.getNr():newChild.getNr(),newjQ);
                    }catch(MathException e){
                        return Double.NEGATIVE_INFINITY;
                    }
                    }else{
                        replace(iP, CiP, newChild);
                        replace(newParent, newChild, iP);

                        CiP.setParent(null);
                        tree.setRoot(CiP);
                        iP.setHeight(newHeight);

                    }



                } else {
                    //System.out.println("flag4");
                    try{
                        double oldiSubst = i.getLength()*quantileUCRelaxedClock.getRawRateForBranch(i);
                        double oldCiPSubst = CiP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(CiP);
                        double oldiPSubst = iP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(iP);
                        double oldjSubst = newChild.getLength()*quantileUCRelaxedClock.getRawRateForBranch(newChild);
                        replace(iP, CiP, newChild);
                        replace(PiP, iP, CiP);
                        replace(newParent, newChild, iP);
                        iP.setHeight(newHeight);
                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(i),
                                quantileUCRelaxedClock.getQuantile(oldiSubst/i.getLength())

                        );

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(CiP),
                                quantileUCRelaxedClock.getQuantile((oldCiPSubst+oldiPSubst)/CiP.getLength())
                        );

                        double prop = Randomizer.nextDouble();

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(iP),
                                quantileUCRelaxedClock.getQuantile(oldjSubst*prop/iP.getLength())
                        );

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(newChild),
                                quantileUCRelaxedClock.getQuantile(oldjSubst*(1.0 - prop)/newChild.getLength())
                        );

                        if(Double.isNaN(oldiSubst/i.getLength())){
                            throw new RuntimeException();
                        }

                        if(Double.isNaN((oldCiPSubst+oldiPSubst)/CiP.getLength())){
                            throw new RuntimeException();
                        }

                        if(Double.isNaN(oldjSubst*prop/iP.getLength())){
                            throw new RuntimeException();
                        }

                        if(Double.isNaN(oldjSubst*(1.0 - prop)/newChild.getLength())){
                            throw new RuntimeException();

                        }

                    }catch(MathException e){
                        return Double.NEGATIVE_INFINITY;
                    }
                }



                logq = Math.log(possibleDestinations);
            } else {
                try{

                    if(iP.isRoot()){
                        //System.out.println("flag5");
                        double oldiSubst = i.getLength()*quantileUCRelaxedClock.getRawRateForBranch(i);
                        double oldCiPSubst = CiP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(CiP);
                        iP.setHeight(newHeight);
                        double newiBranchLength = i.getLength();
                        double newCiPBranchLength = CiP.getLength();
                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(i),
                                quantileUCRelaxedClock.getQuantile(oldiSubst/newiBranchLength)

                        );

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(CiP),
                                quantileUCRelaxedClock.getQuantile(oldCiPSubst/newCiPBranchLength)

                        );

                    }else{
                        //System.out.println("flag6");
                        double oldiSubst = i.getLength()*quantileUCRelaxedClock.getRawRateForBranch(i);
                        double oldCiPSubst = CiP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(CiP);
                        double oldiPSubst = iP.getLength()*quantileUCRelaxedClock.getRawRateForBranch(iP);
                            //System.out.println("oldiSubst: "+oldiSubst);
                            //System.out.println("oldCiPSubs: "+oldCiPSubst);
                            //System.out.println("oldiPSubst: "+oldiPSubst );

                        iP.setHeight(newHeight);

                        double newiBranchLength = i.getLength();
                        double newCiPBranchLength = CiP.getLength();
                        double newiPBranchLength = iP.getLength();

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(i),
                                quantileUCRelaxedClock.getQuantile(oldiSubst/newiBranchLength)

                        );

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(CiP),
                                quantileUCRelaxedClock.getQuantile(oldCiPSubst/newCiPBranchLength)

                        );

                        quantiles.setValue(
                                quantileUCRelaxedClock.getQuantileIndex(iP),
                                quantileUCRelaxedClock.getQuantile(oldiPSubst/newiPBranchLength)

                        );

                        //System.out.println(quantileUCRelaxedClock.getQuantile(oldiSubst/newiBranchLength));
                        //System.out.println(quantileUCRelaxedClock.getQuantile(oldCiPSubst/newCiPBranchLength));
                        //System.out.println(quantileUCRelaxedClock.getQuantile(oldiPSubst/newiPBranchLength));
                    }
                }   catch (MathException e){
                    return Double.NEGATIVE_INFINITY;

                }

                logq = 0.0;
            }

        }
        return logq;
    }

    private double getDelta() {
        if (!m_gaussian.get()) {
            return (Randomizer.nextDouble() * m_fSize) - (m_fSize / 2.0);
        } else {
            return Randomizer.nextGaussian() * m_fSize;
        }
    }

    private int intersectingEdges(Node node, double height, List<Node> directChildren) {
        final Node parent = node.getParent();

        if (parent.getHeight() < height) return 0;

        if (node.getHeight() < height) {
            if (directChildren != null) directChildren.add(node);
            return 1;
        }

        if (node.isLeaf()) {
            // TODO: verify that this makes sense
            return 0;
        } else {
            final int count = intersectingEdges(node.getLeft(), height, directChildren) +
                    intersectingEdges(node.getRight(), height, directChildren);
            return count;
        }
    }

    /**
     * automatic parameter tuning *
     */
    @Override
    public void optimize(final double logAlpha) {
        if (m_bOptimise.get()) {
            double fDelta = calcDelta(logAlpha);
            fDelta += Math.log(m_fSize);
            m_fSize = Math.exp(fDelta);
        }
    }

    @Override
    public double getCoercableParameterValue() {
        return m_fSize;
    }

    @Override
    public void setCoercableParameterValue(final double fValue) {
        m_fSize = fValue;
    }

    @Override
    public String getPerformanceSuggestion() {
        final double prob = m_nNrAccepted / (m_nNrAccepted + m_nNrRejected + 0.0);
        final double targetProb = getTargetAcceptanceProbability();

        double ratio = prob / targetProb;

        if (ratio > 2.0) ratio = 2.0;
        if (ratio < 0.5) ratio = 0.5;

        final double newDelta = m_fSize * ratio;

        final DecimalFormat formatter = new DecimalFormat("#.###");
        if (prob < 0.10) {
            return "Try decreasing size to about " + formatter.format(newDelta);
        } else if (prob > 0.40) {
            return "Try increasing size to about " + formatter.format(newDelta);
        } else return "";
    }
}
